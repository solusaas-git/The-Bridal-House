'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Link from 'next/link';
import axios from 'axios';
import { toast } from 'react-toastify';
import { createPortal } from 'react-dom';
import {
  PlusIcon,
  Pencil1Icon,
  TrashIcon,
  EyeOpenIcon,
  MagnifyingGlassIcon,
  GearIcon,
  DragHandleDots2Icon,
} from '@radix-ui/react-icons';
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import {
  useSortable,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { RootState } from '@/store/store';

// Sortable Item Component for Column Toggle
interface SortableItemProps {
  id: string;
  children: React.ReactNode;
}

function SortableItem({ id, children }: SortableItemProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      className="flex items-center gap-2 p-2 hover:bg-white/5 rounded cursor-pointer"
      {...attributes}
    >
      <div
        {...listeners}
        className="flex items-center justify-center w-6 h-6 text-gray-400 hover:text-gray-300 cursor-grab active:cursor-grabbing"
      >
        <DragHandleDots2Icon className="h-4 w-4" />
      </div>
      {children}
    </div>
  );
}
import { setReservations, removeReservation } from '@/store/reducers/reservationSlice';
import { formatCurrency } from '@/utils/currency';
import Pagination from '@/components/ui/Pagination';
import Layout from '@/components/Layout';

export default function ReservationsPage() {
  const dispatch = useDispatch();
  const reservations = useSelector((state: RootState) => state.reservation.reservations);
  const currencySettings = useSelector((state: RootState) => state.settings);

  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(50);
  const [totalCount, setTotalCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, right: 0 });
  const [savingPreferences, setSavingPreferences] = useState(false);
  const [mounted, setMounted] = useState(false);

  // Date filter state
  const [dateFilters, setDateFilters] = useState({
    dateColumn: 'pickupDate', // Default column to filter
    startDate: '',
    endDate: '',
  });

  // Column visibility state
  const [columnVisibility, setColumnVisibility] = useState({
    id: true,
    createdAt: true,
    clientName: true,
    weddingDate: true,
    items: true,
    pickupDate: true,
    returnDate: true,
    availabilityDate: false,
    total: true,
    type: true,
    status: true,
    paymentStatus: true,
    createdBy: false,
    actions: true,
  });

  // Column order state
  const [columnOrder, setColumnOrder] = useState([
    'id',
    'createdAt',
    'clientName',
    'weddingDate',
    'items',
    'pickupDate',
    'returnDate',
    'availabilityDate',
    'total',
    'type',
    'status',
    'paymentStatus',
    'createdBy',
    'actions',
  ]);

  // Helper function to format dates
  const formatDate = (dateString: string) => {
    if (!dateString) return 'N/A';
    try {
      return format(new Date(dateString), 'MMM dd, yyyy');
    } catch {
      return 'Invalid date';
    }
  };

  // Handle delete reservation
  const handleDeleteReservation = async (reservationId: string) => {
    if (!confirm('Are you sure you want to delete this reservation?')) {
      return;
    }

    try {
      const response = await fetch(`/api/reservations/${reservationId}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        dispatch(removeReservation(reservationId));
        toast.success('Reservation deleted successfully');
        // Refresh the list
        fetchReservations();
      } else {
        toast.error('Failed to delete reservation');
      }
    } catch (error) {
      console.error('Error deleting reservation:', error);
      toast.error('Failed to delete reservation');
    }
  };

  // Column definitions with labels and render functions
  const columnDefinitions: Record<string, {
    label: string;
    renderHeader: () => JSX.Element;
    renderCell: (reservation: any) => JSX.Element;
  }> = {
  id: {
    label: 'ID',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        ID
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {reservation._id?.slice(-6) || 'N/A'}
      </td>
    ),
  },
  createdAt: {
    label: 'Created',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Created
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {formatDate(reservation.createdAt)}
      </td>
    ),
  },
  clientName: {
    label: 'Client',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Client
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap">
        {reservation.client ? (
          <div>
            <div className="text-sm font-medium text-white">
              {reservation.client.firstName} {reservation.client.lastName}
            </div>
            <div className="text-sm text-gray-400">{reservation.client.email}</div>
          </div>
        ) : (
          <span className="text-sm text-gray-400">No client</span>
        )}
      </td>
    ),
  },
  weddingDate: {
    label: 'Wedding Date',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Wedding Date
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {reservation.client?.weddingDate 
          ? formatDate(reservation.client.weddingDate)
          : 'N/A'}
      </td>
    ),
  },
  items: {
    label: 'Items',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Items
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {reservation.items?.length ? `${reservation.items.length} items` : 'No items'}
      </td>
    ),
  },
  pickupDate: {
    label: 'Pickup Date',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Pickup Date
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {formatDate(reservation.pickupDate)}
      </td>
    ),
  },
  returnDate: {
    label: 'Return Date',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Return Date
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {formatDate(reservation.returnDate)}
      </td>
    ),
  },
  availabilityDate: {
    label: 'Availability Date',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Availability Date
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {reservation.availabilityDate ? formatDate(reservation.availabilityDate) : 'N/A'}
      </td>
    ),
  },
  total: {
    label: 'Total',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Total
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {formatCurrency(reservation.totalCost || 0, currencySettings)}
      </td>
    ),
  },
  type: {
    label: 'Type',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Type
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {reservation.type || 'N/A'}
      </td>
    ),
  },
  status: {
    label: 'Status',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Status
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap">
        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
          reservation.status === 'confirmed' 
            ? 'bg-green-500/20 text-green-300' 
            : reservation.status === 'pending'
            ? 'bg-yellow-500/20 text-yellow-300'
            : 'bg-red-500/20 text-red-300'
        }`}>
          {reservation.status || 'pending'}
        </span>
      </td>
    ),
  },
  paymentStatus: {
    label: 'Payment',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Payment
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap">
        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
          reservation.paymentStatus === 'paid' 
            ? 'bg-green-500/20 text-green-300' 
            : reservation.paymentStatus === 'partial'
            ? 'bg-yellow-500/20 text-yellow-300'
            : 'bg-red-500/20 text-red-300'
        }`}>
          {reservation.paymentStatus || 'unpaid'}
        </span>
      </td>
    ),
  },
  createdBy: {
    label: 'Created By',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Created By
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
        {reservation.createdBy?.name || 'N/A'}
      </td>
    ),
  },
  actions: {
    label: 'Actions',
    renderHeader: () => (
      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
        Actions
      </th>
    ),
    renderCell: (reservation: any) => (
      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <div className="flex items-center space-x-2">
          <Link 
            href={`/reservations/${reservation._id}`}
            className="text-blue-400 hover:text-blue-300 transition-colors"
          >
            <EyeOpenIcon className="h-4 w-4" />
          </Link>
          <Link 
            href={`/reservations/${reservation._id}/edit`}
            className="text-yellow-400 hover:text-yellow-300 transition-colors"
          >
            <Pencil1Icon className="h-4 w-4" />
          </Link>
          <button
            onClick={() => handleDeleteReservation(reservation._id)}
            className="text-red-400 hover:text-red-300 transition-colors"
          >
            <TrashIcon className="h-4 w-4" />
          </button>
        </div>
      </td>
    ),
  },
};

  };

  // Column labels mapping for the toggle
  const columnLabels: Record<string, string> = Object.fromEntries(
    Object.entries(columnDefinitions).map(([key, def]) => [key, def.label])
  );

  useEffect(() => {
    setMounted(true);
  }, []);

  // Load column preferences on component mount
  useEffect(() => {
    const loadColumnPreferences = async () => {
      try {
        const response = await axios.get('/api/user-preferences/columns/reservations');
        if (response.data.success && response.data.columnPreferences) {
          setColumnVisibility(response.data.columnPreferences);
        }
        if (response.data.success && response.data.columnOrder) {
          setColumnOrder(response.data.columnOrder);
        }
      } catch (error) {
        console.error('Failed to load column preferences:', error);
        // Keep default values if loading fails
      }
    };

    loadColumnPreferences();
  }, []);

  const handleDropdownToggle = (event: React.MouseEvent<HTMLButtonElement>) => {
    if (!dropdownOpen) {
      const rect = event.currentTarget.getBoundingClientRect();
      setDropdownPosition({
        top: rect.bottom + window.scrollY + 8,
        right: window.innerWidth - rect.right,
      });
    }
    setDropdownOpen(!dropdownOpen);
  };

  // Fetch reservations with useCallback
  const fetchReservations = useCallback(async () => {
    try {
      setLoading(true);
      const params: any = {
        page: currentPage,
        limit: itemsPerPage,
        search: searchTerm,
      };

      // Add date filters if they are set
      if (dateFilters.startDate) {
        params.startDate = dateFilters.startDate;
      }
      if (dateFilters.endDate) {
        params.endDate = dateFilters.endDate;
      }
      if (dateFilters.startDate || dateFilters.endDate) {
        params.dateColumn = dateFilters.dateColumn;
      }

      const response = await axios.get('/api/reservations', { params });

      if (response.data.success) {
        dispatch(setReservations(response.data.reservations));
        setTotalCount(response.data.pagination?.totalCount || response.data.reservations.length);
      } else {
        setError(response.data.message || 'Failed to fetch reservations');
        toast.error(response.data.message || 'Failed to load reservations');
      }
    } catch (error) {
      setError('Failed to fetch reservations');
      console.error('Error fetching reservations:', error);
      if (axios.isAxiosError(error) && error.response) {
        toast.error(`Failed to load reservations: ${error.response.data.message || error.message}`);
      } else {
        toast.error('Failed to load reservations: Network error');
      }
    } finally {
      setLoading(false);
    }
  }, [currentPage, itemsPerPage, searchTerm, dateFilters, dispatch]);

  useEffect(() => {
    fetchReservations();
  }, [fetchReservations]);

  // Toggle column visibility and save to database
  const toggleColumn = (column: string) => {
    const newVisibility = {
      ...columnVisibility,
      [column]: !columnVisibility[column as keyof typeof columnVisibility],
    };
    
    setColumnVisibility(newVisibility);
    saveColumnPreferences(newVisibility);
  };

  const saveColumnPreferences = async (preferences: typeof columnVisibility, order?: string[]) => {
    try {
      setSavingPreferences(true);
      await axios.put('/api/user-preferences/columns/reservations', {
        columnVisibility: preferences,
        columnOrder: order || columnOrder,
      });
      toast.success('Column preferences saved successfully');
    } catch (error) {
      console.error('Failed to save column preferences:', error);
      toast.error('Failed to save column preferences');
    } finally {
      setSavingPreferences(false);
    }
  };

  // Drag and drop sensors
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (active.id !== over?.id) {
      const oldIndex = columnOrder.indexOf(active.id as string);
      const newIndex = columnOrder.indexOf(over?.id as string);
      const newOrder = arrayMove(columnOrder, oldIndex, newIndex);
      setColumnOrder(newOrder);
      saveColumnPreferences(columnVisibility, newOrder);
    }
  };

  const handleDeleteReservation = async (reservationId: string) => {
    if (!confirm('Are you sure you want to delete this reservation?')) {
      return;
    }

    try {
      const response = await fetch(`/api/reservations/${reservationId}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        dispatch(removeReservation(reservationId));
        toast.success('Reservation deleted successfully');
        // Refresh the list
        fetchReservations();
      } else {
        toast.error('Failed to delete reservation');
      }
    } catch (error) {
      console.error('Error deleting reservation:', error);
      toast.error('Failed to delete reservation');
    }
  };

  // Filter reservations based on search term
  const filteredReservations = reservations.filter((reservation: any) => {
    const searchLower = searchTerm.toLowerCase();
    return (
      reservation.type?.toLowerCase().includes(searchLower) ||
      reservation.status?.toLowerCase().includes(searchLower) ||
      reservation.paymentStatus?.toLowerCase().includes(searchLower) ||
      (reservation.client && (
        `${reservation.client.firstName} ${reservation.client.lastName}`.toLowerCase().includes(searchLower) ||
        reservation.client.email?.toLowerCase().includes(searchLower) ||
        reservation.client.phone?.includes(searchLower)
      )) ||
      reservation.items?.some((item: any) => 
        item.name?.toLowerCase().includes(searchLower)
      )
    );
  });

  const totalPages = Math.ceil(totalCount / itemsPerPage);

  const formatDate = (dateString: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  const formatItemsList = (items: any[]) => {
    if (!items || items.length === 0) return 'No items';
    if (items.length === 1) return items[0].name;
    return `${items[0].name} (+${items.length - 1} more)`;
  };

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'Confirmed': return 'bg-green-500/20 text-green-400 border-green-500/30';
      case 'Draft': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'Cancelled': return 'bg-red-500/20 text-red-400 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const getPaymentStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'Paid': return 'bg-green-500/20 text-green-400 border-green-500/30';
      case 'Partially Paid': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'Pending': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      case 'Not Paid': return 'bg-red-500/20 text-red-400 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  if (error) {
    return (
      <Layout>
        <div className="space-y-6">
          <div className="text-center text-red-400">
            <p>Error: {error}</p>
            <button 
              onClick={fetchReservations}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Try Again
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-white">Reservations</h1>
            <p className="text-gray-300">Manage your reservation bookings</p>
          </div>
          <Link
            href="/reservations/add"
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
          >
            <PlusIcon className="h-4 w-4" />
            Add Reservation
          </Link>
        </div>

        {/* Filters and Search */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl border border-white/10 p-6">
          <div className="space-y-4">
            {/* Search and Columns Row */}
            <div className="flex items-center justify-between gap-4">
              {/* Search */}
              <div className="relative flex-1 max-w-md">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search reservations..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* Column Visibility Toggle */}
              <div className="relative dropdown-container">
                <button
                  onClick={handleDropdownToggle}
                  className="flex items-center gap-2 px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white hover:bg-white/20 transition-colors"
                >
                  <GearIcon className="h-4 w-4" />
                  Columns
                </button>
              </div>
            </div>

            {/* Date Filters Row */}
            <div className="flex items-center gap-4 flex-wrap">
              {/* Date Column Selector */}
              <div className="flex items-center gap-2">
                <label className="text-sm font-medium text-gray-300">Filter by:</label>
                <select
                  value={dateFilters.dateColumn}
                  onChange={(e) => setDateFilters(prev => ({ ...prev, dateColumn: e.target.value }))}
                  className="px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="pickupDate">Pickup Date</option>
                  <option value="returnDate">Return Date</option>
                  <option value="weddingDate">Wedding Date</option>
                  <option value="availabilityDate">Availability Date</option>
                  <option value="createdAt">Created Date</option>
                </select>
              </div>

              {/* Start Date */}
              <div className="flex items-center gap-2">
                <label className="text-sm font-medium text-gray-300">From:</label>
                <input
                  type="date"
                  value={dateFilters.startDate}
                  onChange={(e) => setDateFilters(prev => ({ ...prev, startDate: e.target.value }))}
                  className="px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* End Date */}
              <div className="flex items-center gap-2">
                <label className="text-sm font-medium text-gray-300">To:</label>
                <input
                  type="date"
                  value={dateFilters.endDate}
                  onChange={(e) => setDateFilters(prev => ({ ...prev, endDate: e.target.value }))}
                  className="px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              {/* Clear Filters */}
              {(dateFilters.startDate || dateFilters.endDate) && (
                <button
                  onClick={() => setDateFilters(prev => ({ ...prev, startDate: '', endDate: '' }))}
                  className="px-3 py-2 text-sm text-gray-300 hover:text-white bg-white/5 hover:bg-white/10 border border-white/20 rounded-md transition-colors"
                >
                  Clear Dates
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Portal-rendered dropdown */}
        {mounted && dropdownOpen && createPortal(
          <>
            {/* Backdrop */}
            <div 
              className="fixed inset-0 z-[9998]" 
              onClick={() => setDropdownOpen(false)}
            />
            
            {/* Dropdown */}
            <div 
              className="fixed w-64 bg-gray-900/95 backdrop-blur-xl border border-white/20 rounded-lg shadow-xl z-[9999]"
              style={{
                top: `${dropdownPosition.top}px`,
                right: `${dropdownPosition.right}px`,
              }}
            >
              <div className="p-4">
                <h3 className="text-sm font-medium text-white mb-3">
                  Show/Hide Columns
                  {savingPreferences && (
                    <span className="ml-2 text-xs text-blue-400">Saving...</span>
                  )}
                </h3>
                
                <DndContext
                  sensors={sensors}
                  collisionDetection={closestCenter}
                  onDragEnd={handleDragEnd}
                >
                  <SortableContext
                    items={columnOrder}
                    strategy={verticalListSortingStrategy}
                  >
                    <div className="space-y-1">
                      <div className="text-xs text-gray-400 mb-2 flex items-center gap-2">
                        <DragHandleDots2Icon className="h-3 w-3" />
                        Drag to reorder columns
                      </div>
                      {columnOrder.map((columnKey) => (
                        <SortableItem key={columnKey} id={columnKey}>
                          <label className="flex items-center flex-1">
                            <input
                              type="checkbox"
                              checked={columnVisibility[columnKey as keyof typeof columnVisibility]}
                              onChange={() => toggleColumn(columnKey)}
                              className="rounded border-white/30 bg-white/10 text-blue-600 focus:ring-blue-500 focus:ring-offset-0"
                            />
                            <span className="ml-2 text-sm text-gray-300">
                              {columnLabels[columnKey]}
                            </span>
                          </label>
                        </SortableItem>
                      ))}
                    </div>
                  </SortableContext>
                </DndContext>

                <div className="flex justify-end space-x-2 mt-4 pt-3 border-t border-white/20">
                  <button
                    onClick={() => setDropdownOpen(false)}
                    className="px-3 py-1 text-sm text-gray-300 hover:text-white transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => saveColumnPreferences(columnVisibility)}
                    disabled={savingPreferences}
                    className="px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors disabled:opacity-50"
                  >
                    {savingPreferences ? 'Saving...' : 'Save'}
                  </button>
                </div>
              </div>
            </div>
          </>,
          document.body
        )}

        {/* Table */}
        <div className="bg-white/10 backdrop-blur-lg rounded-xl border border-white/10 overflow-hidden">
          {loading ? (
            <div className="p-8 text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
              <p className="text-gray-300">Loading reservations...</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-white/5 border-b border-white/10">
                  <tr>
                    {columnVisibility.id && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        ID
                      </th>
                    )}
                    {columnVisibility.createdAt && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Created
                      </th>
                    )}
                                         {columnVisibility.clientName && (
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                         Client
                       </th>
                     )}
                     {columnVisibility.weddingDate && (
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                         Wedding Date
                       </th>
                     )}
                     {columnVisibility.items && (
                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                         Items
                       </th>
                     )}
                    {columnVisibility.pickupDate && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Pickup Date
                      </th>
                    )}
                    {columnVisibility.returnDate && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Return Date
                      </th>
                    )}
                    {columnVisibility.availabilityDate && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Availability Date
                      </th>
                    )}
                    {columnVisibility.total && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Total
                      </th>
                    )}
                    {columnVisibility.type && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Type
                      </th>
                    )}
                    {columnVisibility.status && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Status
                      </th>
                    )}
                    {columnVisibility.paymentStatus && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Payment
                      </th>
                    )}
                    {columnVisibility.createdBy && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Created By
                      </th>
                    )}
                    {columnVisibility.actions && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                        Actions
                      </th>
                    )}
                  </tr>
                </thead>
                <tbody className="divide-y divide-white/10">
                  {reservations?.map((reservation: any, index) => (
                    <tr key={reservation._id} className="hover:bg-white/5 transition-colors">
                      {columnVisibility.id && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {reservation._id?.slice(-6) || 'N/A'}
                        </td>
                      )}
                      {columnVisibility.createdAt && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {formatDate(reservation.createdAt)}
                        </td>
                      )}
                                             {columnVisibility.clientName && (
                         <td className="px-6 py-4 whitespace-nowrap">
                           {reservation.client ? (
                             <div>
                               <div className="text-sm font-medium text-white">
                                 {reservation.client.firstName} {reservation.client.lastName}
                               </div>
                               <div className="text-sm text-gray-400">{reservation.client.email}</div>
                             </div>
                           ) : (
                             <span className="text-sm text-gray-400">No client</span>
                           )}
                         </td>
                       )}
                       {columnVisibility.weddingDate && (
                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                           {reservation.client?.weddingDate ? formatDate(reservation.client.weddingDate) : 'N/A'}
                         </td>
                       )}
                       {columnVisibility.items && (
                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                           {formatItemsList(reservation.items)}
                         </td>
                       )}
                      {columnVisibility.pickupDate && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {formatDate(reservation.pickupDate)}
                        </td>
                      )}
                      {columnVisibility.returnDate && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {formatDate(reservation.returnDate)}
                        </td>
                      )}
                      {columnVisibility.availabilityDate && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {formatDate(reservation.availabilityDate)}
                        </td>
                      )}
                      {columnVisibility.total && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">
                          {formatCurrency(reservation.total || reservation.totalAmount || 0, currencySettings)}
                        </td>
                      )}
                      {columnVisibility.type && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {reservation.type}
                        </td>
                      )}
                      {columnVisibility.status && (
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getStatusBadgeColor(reservation.status)}`}>
                            {reservation.status}
                          </span>
                        </td>
                      )}
                      {columnVisibility.paymentStatus && (
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full border ${getPaymentStatusBadgeColor(reservation.paymentStatus || 'Pending')}`}>
                            {reservation.paymentStatus || 'Pending'}
                          </span>
                        </td>
                      )}
                      {columnVisibility.createdBy && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                          {reservation.createdBy?.name || 'N/A'}
                        </td>
                      )}
                      {columnVisibility.actions && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <div className="flex items-center space-x-3">
                            <Link
                              href={`/reservations/${reservation._id}`}
                              className="text-blue-400 hover:text-blue-300 transition-colors"
                              title="View"
                            >
                              <EyeOpenIcon className="w-4 h-4" />
                            </Link>
                            <Link
                              href={`/reservations/${reservation._id}/edit`}
                              className="text-green-400 hover:text-green-300 transition-colors"
                              title="Edit"
                            >
                              <Pencil1Icon className="w-4 h-4" />
                            </Link>
                            <button
                              onClick={() => handleDeleteReservation(reservation._id)}
                              className="text-red-400 hover:text-red-300 transition-colors"
                              title="Delete"
                            >
                              <TrashIcon className="w-4 h-4" />
                            </button>
                          </div>
                        </td>
                      )}
                    </tr>
                  ))}
                </tbody>
              </table>

              {reservations?.length === 0 && !loading && (
                <div className="text-center py-12">
                  <p className="text-gray-400">No reservations found</p>
                  {searchTerm && (
                    <p className="text-gray-500 text-sm mt-2">
                      Try adjusting your search criteria
                    </p>
                  )}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Pagination */}
        {totalCount > 0 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            pageSize={itemsPerPage}
            totalCount={totalCount}
            onPageChange={(page) => setCurrentPage(page)}
            onPageSizeChange={(size) => {
              setItemsPerPage(size);
              setCurrentPage(1); // Reset to first page when page size changes
            }}
            showPageSizeSelector={true}
            pageSizeOptions={[10, 25, 50, 100]}
          />
        )}
      </div>
    </Layout>
  );
} 